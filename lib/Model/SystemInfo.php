<?php

declare(strict_types=1);

/**
 * SystemInfo.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Docker Engine API.
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.43) is used. For example, calling `/info` is the same as calling `/v1.43/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * The version of the OpenAPI document: 1.43
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MatthewBaggett\Docker\Api\Model;

use MatthewBaggett\Docker\Api\ObjectSerializer;

/**
 * SystemInfo Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class SystemInfo implements ModelInterface, \ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'SystemInfo';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'id'                    => 'string',
        'containers'            => 'int',
        'containers_running'    => 'int',
        'containers_paused'     => 'int',
        'containers_stopped'    => 'int',
        'images'                => 'int',
        'driver'                => 'string',
        'driver_status'         => 'string[][]',
        'docker_root_dir'       => 'string',
        'plugins'               => '\MatthewBaggett\Docker\Api\Model\PluginsInfo',
        'memory_limit'          => 'bool',
        'swap_limit'            => 'bool',
        'kernel_memory_tcp'     => 'bool',
        'cpu_cfs_period'        => 'bool',
        'cpu_cfs_quota'         => 'bool',
        'cpu_shares'            => 'bool',
        'cpu_set'               => 'bool',
        'pids_limit'            => 'bool',
        'oom_kill_disable'      => 'bool',
        'ipv4_forwarding'       => 'bool',
        'bridge_nf_iptables'    => 'bool',
        'bridge_nf_ip6tables'   => 'bool',
        'debug'                 => 'bool',
        'nfd'                   => 'int',
        'n_goroutines'          => 'int',
        'system_time'           => 'string',
        'logging_driver'        => 'string',
        'cgroup_driver'         => 'string',
        'cgroup_version'        => 'string',
        'n_events_listener'     => 'int',
        'kernel_version'        => 'string',
        'operating_system'      => 'string',
        'os_version'            => 'string',
        'os_type'               => 'string',
        'architecture'          => 'string',
        'ncpu'                  => 'int',
        'mem_total'             => 'int',
        'index_server_address'  => 'string',
        'registry_config'       => '\MatthewBaggett\Docker\Api\Model\RegistryServiceConfig',
        'generic_resources'     => '\MatthewBaggett\Docker\Api\Model\GenericResourcesInner[]',
        'http_proxy'            => 'string',
        'https_proxy'           => 'string',
        'no_proxy'              => 'string',
        'name'                  => 'string',
        'labels'                => 'string[]',
        'experimental_build'    => 'bool',
        'server_version'        => 'string',
        'runtimes'              => 'array<string,\MatthewBaggett\Docker\Api\Model\Runtime>',
        'default_runtime'       => 'string',
        'swarm'                 => '\MatthewBaggett\Docker\Api\Model\SwarmInfo',
        'live_restore_enabled'  => 'bool',
        'isolation'             => 'string',
        'init_binary'           => 'string',
        'containerd_commit'     => '\MatthewBaggett\Docker\Api\Model\Commit',
        'runc_commit'           => '\MatthewBaggett\Docker\Api\Model\Commit',
        'init_commit'           => '\MatthewBaggett\Docker\Api\Model\Commit',
        'security_options'      => 'string[]',
        'product_license'       => 'string',
        'default_address_pools' => '\MatthewBaggett\Docker\Api\Model\SystemInfoDefaultAddressPoolsInner[]',
        'warnings'              => 'string[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'id'                    => null,
        'containers'            => null,
        'containers_running'    => null,
        'containers_paused'     => null,
        'containers_stopped'    => null,
        'images'                => null,
        'driver'                => null,
        'driver_status'         => null,
        'docker_root_dir'       => null,
        'plugins'               => null,
        'memory_limit'          => null,
        'swap_limit'            => null,
        'kernel_memory_tcp'     => null,
        'cpu_cfs_period'        => null,
        'cpu_cfs_quota'         => null,
        'cpu_shares'            => null,
        'cpu_set'               => null,
        'pids_limit'            => null,
        'oom_kill_disable'      => null,
        'ipv4_forwarding'       => null,
        'bridge_nf_iptables'    => null,
        'bridge_nf_ip6tables'   => null,
        'debug'                 => null,
        'nfd'                   => null,
        'n_goroutines'          => null,
        'system_time'           => null,
        'logging_driver'        => null,
        'cgroup_driver'         => null,
        'cgroup_version'        => null,
        'n_events_listener'     => null,
        'kernel_version'        => null,
        'operating_system'      => null,
        'os_version'            => null,
        'os_type'               => null,
        'architecture'          => null,
        'ncpu'                  => null,
        'mem_total'             => 'int64',
        'index_server_address'  => null,
        'registry_config'       => null,
        'generic_resources'     => null,
        'http_proxy'            => null,
        'https_proxy'           => null,
        'no_proxy'              => null,
        'name'                  => null,
        'labels'                => null,
        'experimental_build'    => null,
        'server_version'        => null,
        'runtimes'              => null,
        'default_runtime'       => null,
        'swarm'                 => null,
        'live_restore_enabled'  => null,
        'isolation'             => null,
        'init_binary'           => null,
        'containerd_commit'     => null,
        'runc_commit'           => null,
        'init_commit'           => null,
        'security_options'      => null,
        'product_license'       => null,
        'default_address_pools' => null,
        'warnings'              => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization.
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'id'                    => false,
        'containers'            => false,
        'containers_running'    => false,
        'containers_paused'     => false,
        'containers_stopped'    => false,
        'images'                => false,
        'driver'                => false,
        'driver_status'         => false,
        'docker_root_dir'       => false,
        'plugins'               => false,
        'memory_limit'          => false,
        'swap_limit'            => false,
        'kernel_memory_tcp'     => false,
        'cpu_cfs_period'        => false,
        'cpu_cfs_quota'         => false,
        'cpu_shares'            => false,
        'cpu_set'               => false,
        'pids_limit'            => false,
        'oom_kill_disable'      => false,
        'ipv4_forwarding'       => false,
        'bridge_nf_iptables'    => false,
        'bridge_nf_ip6tables'   => false,
        'debug'                 => false,
        'nfd'                   => false,
        'n_goroutines'          => false,
        'system_time'           => false,
        'logging_driver'        => false,
        'cgroup_driver'         => false,
        'cgroup_version'        => false,
        'n_events_listener'     => false,
        'kernel_version'        => false,
        'operating_system'      => false,
        'os_version'            => false,
        'os_type'               => false,
        'architecture'          => false,
        'ncpu'                  => false,
        'mem_total'             => false,
        'index_server_address'  => false,
        'registry_config'       => true,
        'generic_resources'     => false,
        'http_proxy'            => false,
        'https_proxy'           => false,
        'no_proxy'              => false,
        'name'                  => false,
        'labels'                => false,
        'experimental_build'    => false,
        'server_version'        => false,
        'runtimes'              => false,
        'default_runtime'       => false,
        'swarm'                 => false,
        'live_restore_enabled'  => false,
        'isolation'             => false,
        'init_binary'           => false,
        'containerd_commit'     => false,
        'runc_commit'           => false,
        'init_commit'           => false,
        'security_options'      => false,
        'product_license'       => false,
        'default_address_pools' => false,
        'warnings'              => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here.
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties.
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null.
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null.
     *
     * @param bool[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable.
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id'                    => 'ID',
        'containers'            => 'Containers',
        'containers_running'    => 'ContainersRunning',
        'containers_paused'     => 'ContainersPaused',
        'containers_stopped'    => 'ContainersStopped',
        'images'                => 'Images',
        'driver'                => 'Driver',
        'driver_status'         => 'DriverStatus',
        'docker_root_dir'       => 'DockerRootDir',
        'plugins'               => 'Plugins',
        'memory_limit'          => 'MemoryLimit',
        'swap_limit'            => 'SwapLimit',
        'kernel_memory_tcp'     => 'KernelMemoryTCP',
        'cpu_cfs_period'        => 'CpuCfsPeriod',
        'cpu_cfs_quota'         => 'CpuCfsQuota',
        'cpu_shares'            => 'CPUShares',
        'cpu_set'               => 'CPUSet',
        'pids_limit'            => 'PidsLimit',
        'oom_kill_disable'      => 'OomKillDisable',
        'ipv4_forwarding'       => 'IPv4Forwarding',
        'bridge_nf_iptables'    => 'BridgeNfIptables',
        'bridge_nf_ip6tables'   => 'BridgeNfIp6tables',
        'debug'                 => 'Debug',
        'nfd'                   => 'NFd',
        'n_goroutines'          => 'NGoroutines',
        'system_time'           => 'SystemTime',
        'logging_driver'        => 'LoggingDriver',
        'cgroup_driver'         => 'CgroupDriver',
        'cgroup_version'        => 'CgroupVersion',
        'n_events_listener'     => 'NEventsListener',
        'kernel_version'        => 'KernelVersion',
        'operating_system'      => 'OperatingSystem',
        'os_version'            => 'OSVersion',
        'os_type'               => 'OSType',
        'architecture'          => 'Architecture',
        'ncpu'                  => 'NCPU',
        'mem_total'             => 'MemTotal',
        'index_server_address'  => 'IndexServerAddress',
        'registry_config'       => 'RegistryConfig',
        'generic_resources'     => 'GenericResources',
        'http_proxy'            => 'HttpProxy',
        'https_proxy'           => 'HttpsProxy',
        'no_proxy'              => 'NoProxy',
        'name'                  => 'Name',
        'labels'                => 'Labels',
        'experimental_build'    => 'ExperimentalBuild',
        'server_version'        => 'ServerVersion',
        'runtimes'              => 'Runtimes',
        'default_runtime'       => 'DefaultRuntime',
        'swarm'                 => 'Swarm',
        'live_restore_enabled'  => 'LiveRestoreEnabled',
        'isolation'             => 'Isolation',
        'init_binary'           => 'InitBinary',
        'containerd_commit'     => 'ContainerdCommit',
        'runc_commit'           => 'RuncCommit',
        'init_commit'           => 'InitCommit',
        'security_options'      => 'SecurityOptions',
        'product_license'       => 'ProductLicense',
        'default_address_pools' => 'DefaultAddressPools',
        'warnings'              => 'Warnings',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'id'                    => 'setId',
        'containers'            => 'setContainers',
        'containers_running'    => 'setContainersRunning',
        'containers_paused'     => 'setContainersPaused',
        'containers_stopped'    => 'setContainersStopped',
        'images'                => 'setImages',
        'driver'                => 'setDriver',
        'driver_status'         => 'setDriverStatus',
        'docker_root_dir'       => 'setDockerRootDir',
        'plugins'               => 'setPlugins',
        'memory_limit'          => 'setMemoryLimit',
        'swap_limit'            => 'setSwapLimit',
        'kernel_memory_tcp'     => 'setKernelMemoryTcp',
        'cpu_cfs_period'        => 'setCpuCfsPeriod',
        'cpu_cfs_quota'         => 'setCpuCfsQuota',
        'cpu_shares'            => 'setCpuShares',
        'cpu_set'               => 'setCpuSet',
        'pids_limit'            => 'setPidsLimit',
        'oom_kill_disable'      => 'setOomKillDisable',
        'ipv4_forwarding'       => 'setIpv4Forwarding',
        'bridge_nf_iptables'    => 'setBridgeNfIptables',
        'bridge_nf_ip6tables'   => 'setBridgeNfIp6tables',
        'debug'                 => 'setDebug',
        'nfd'                   => 'setNfd',
        'n_goroutines'          => 'setNGoroutines',
        'system_time'           => 'setSystemTime',
        'logging_driver'        => 'setLoggingDriver',
        'cgroup_driver'         => 'setCgroupDriver',
        'cgroup_version'        => 'setCgroupVersion',
        'n_events_listener'     => 'setNEventsListener',
        'kernel_version'        => 'setKernelVersion',
        'operating_system'      => 'setOperatingSystem',
        'os_version'            => 'setOsVersion',
        'os_type'               => 'setOsType',
        'architecture'          => 'setArchitecture',
        'ncpu'                  => 'setNcpu',
        'mem_total'             => 'setMemTotal',
        'index_server_address'  => 'setIndexServerAddress',
        'registry_config'       => 'setRegistryConfig',
        'generic_resources'     => 'setGenericResources',
        'http_proxy'            => 'setHttpProxy',
        'https_proxy'           => 'setHttpsProxy',
        'no_proxy'              => 'setNoProxy',
        'name'                  => 'setName',
        'labels'                => 'setLabels',
        'experimental_build'    => 'setExperimentalBuild',
        'server_version'        => 'setServerVersion',
        'runtimes'              => 'setRuntimes',
        'default_runtime'       => 'setDefaultRuntime',
        'swarm'                 => 'setSwarm',
        'live_restore_enabled'  => 'setLiveRestoreEnabled',
        'isolation'             => 'setIsolation',
        'init_binary'           => 'setInitBinary',
        'containerd_commit'     => 'setContainerdCommit',
        'runc_commit'           => 'setRuncCommit',
        'init_commit'           => 'setInitCommit',
        'security_options'      => 'setSecurityOptions',
        'product_license'       => 'setProductLicense',
        'default_address_pools' => 'setDefaultAddressPools',
        'warnings'              => 'setWarnings',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'id'                    => 'getId',
        'containers'            => 'getContainers',
        'containers_running'    => 'getContainersRunning',
        'containers_paused'     => 'getContainersPaused',
        'containers_stopped'    => 'getContainersStopped',
        'images'                => 'getImages',
        'driver'                => 'getDriver',
        'driver_status'         => 'getDriverStatus',
        'docker_root_dir'       => 'getDockerRootDir',
        'plugins'               => 'getPlugins',
        'memory_limit'          => 'getMemoryLimit',
        'swap_limit'            => 'getSwapLimit',
        'kernel_memory_tcp'     => 'getKernelMemoryTcp',
        'cpu_cfs_period'        => 'getCpuCfsPeriod',
        'cpu_cfs_quota'         => 'getCpuCfsQuota',
        'cpu_shares'            => 'getCpuShares',
        'cpu_set'               => 'getCpuSet',
        'pids_limit'            => 'getPidsLimit',
        'oom_kill_disable'      => 'getOomKillDisable',
        'ipv4_forwarding'       => 'getIpv4Forwarding',
        'bridge_nf_iptables'    => 'getBridgeNfIptables',
        'bridge_nf_ip6tables'   => 'getBridgeNfIp6tables',
        'debug'                 => 'getDebug',
        'nfd'                   => 'getNfd',
        'n_goroutines'          => 'getNGoroutines',
        'system_time'           => 'getSystemTime',
        'logging_driver'        => 'getLoggingDriver',
        'cgroup_driver'         => 'getCgroupDriver',
        'cgroup_version'        => 'getCgroupVersion',
        'n_events_listener'     => 'getNEventsListener',
        'kernel_version'        => 'getKernelVersion',
        'operating_system'      => 'getOperatingSystem',
        'os_version'            => 'getOsVersion',
        'os_type'               => 'getOsType',
        'architecture'          => 'getArchitecture',
        'ncpu'                  => 'getNcpu',
        'mem_total'             => 'getMemTotal',
        'index_server_address'  => 'getIndexServerAddress',
        'registry_config'       => 'getRegistryConfig',
        'generic_resources'     => 'getGenericResources',
        'http_proxy'            => 'getHttpProxy',
        'https_proxy'           => 'getHttpsProxy',
        'no_proxy'              => 'getNoProxy',
        'name'                  => 'getName',
        'labels'                => 'getLabels',
        'experimental_build'    => 'getExperimentalBuild',
        'server_version'        => 'getServerVersion',
        'runtimes'              => 'getRuntimes',
        'default_runtime'       => 'getDefaultRuntime',
        'swarm'                 => 'getSwarm',
        'live_restore_enabled'  => 'getLiveRestoreEnabled',
        'isolation'             => 'getIsolation',
        'init_binary'           => 'getInitBinary',
        'containerd_commit'     => 'getContainerdCommit',
        'runc_commit'           => 'getRuncCommit',
        'init_commit'           => 'getInitCommit',
        'security_options'      => 'getSecurityOptions',
        'product_license'       => 'getProductLicense',
        'default_address_pools' => 'getDefaultAddressPools',
        'warnings'              => 'getWarnings',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CGROUP_DRIVER_CGROUPFS = 'cgroupfs';
    public const CGROUP_DRIVER_SYSTEMD  = 'systemd';
    public const CGROUP_DRIVER_NONE     = 'none';
    public const CGROUP_VERSION__1      = '1';
    public const CGROUP_VERSION__2      = '2';
    public const ISOLATION__DEFAULT     = 'default';
    public const ISOLATION_HYPERV       = 'hyperv';
    public const ISOLATION_PROCESS      = 'process';

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getCgroupDriverAllowableValues()
    {
        return [
            self::CGROUP_DRIVER_CGROUPFS,
            self::CGROUP_DRIVER_SYSTEMD,
            self::CGROUP_DRIVER_NONE,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getCgroupVersionAllowableValues()
    {
        return [
            self::CGROUP_VERSION__1,
            self::CGROUP_VERSION__2,
        ];
    }

    /**
     * Gets allowable values of the enum.
     *
     * @return string[]
     */
    public function getIsolationAllowableValues()
    {
        return [
            self::ISOLATION__DEFAULT,
            self::ISOLATION_HYPERV,
            self::ISOLATION_PROCESS,
        ];
    }

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('containers', $data ?? [], null);
        $this->setIfExists('containers_running', $data ?? [], null);
        $this->setIfExists('containers_paused', $data ?? [], null);
        $this->setIfExists('containers_stopped', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('driver', $data ?? [], null);
        $this->setIfExists('driver_status', $data ?? [], null);
        $this->setIfExists('docker_root_dir', $data ?? [], null);
        $this->setIfExists('plugins', $data ?? [], null);
        $this->setIfExists('memory_limit', $data ?? [], null);
        $this->setIfExists('swap_limit', $data ?? [], null);
        $this->setIfExists('kernel_memory_tcp', $data ?? [], null);
        $this->setIfExists('cpu_cfs_period', $data ?? [], null);
        $this->setIfExists('cpu_cfs_quota', $data ?? [], null);
        $this->setIfExists('cpu_shares', $data ?? [], null);
        $this->setIfExists('cpu_set', $data ?? [], null);
        $this->setIfExists('pids_limit', $data ?? [], null);
        $this->setIfExists('oom_kill_disable', $data ?? [], null);
        $this->setIfExists('ipv4_forwarding', $data ?? [], null);
        $this->setIfExists('bridge_nf_iptables', $data ?? [], null);
        $this->setIfExists('bridge_nf_ip6tables', $data ?? [], null);
        $this->setIfExists('debug', $data ?? [], null);
        $this->setIfExists('nfd', $data ?? [], null);
        $this->setIfExists('n_goroutines', $data ?? [], null);
        $this->setIfExists('system_time', $data ?? [], null);
        $this->setIfExists('logging_driver', $data ?? [], null);
        $this->setIfExists('cgroup_driver', $data ?? [], 'cgroupfs');
        $this->setIfExists('cgroup_version', $data ?? [], '1');
        $this->setIfExists('n_events_listener', $data ?? [], null);
        $this->setIfExists('kernel_version', $data ?? [], null);
        $this->setIfExists('operating_system', $data ?? [], null);
        $this->setIfExists('os_version', $data ?? [], null);
        $this->setIfExists('os_type', $data ?? [], null);
        $this->setIfExists('architecture', $data ?? [], null);
        $this->setIfExists('ncpu', $data ?? [], null);
        $this->setIfExists('mem_total', $data ?? [], null);
        $this->setIfExists('index_server_address', $data ?? [], 'https://index.docker.io/v1/');
        $this->setIfExists('registry_config', $data ?? [], null);
        $this->setIfExists('generic_resources', $data ?? [], null);
        $this->setIfExists('http_proxy', $data ?? [], null);
        $this->setIfExists('https_proxy', $data ?? [], null);
        $this->setIfExists('no_proxy', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('experimental_build', $data ?? [], null);
        $this->setIfExists('server_version', $data ?? [], null);
        $this->setIfExists('runtimes', $data ?? [], null);
        $this->setIfExists('default_runtime', $data ?? [], 'runc');
        $this->setIfExists('swarm', $data ?? [], null);
        $this->setIfExists('live_restore_enabled', $data ?? [], false);
        $this->setIfExists('isolation', $data ?? [], 'default');
        $this->setIfExists('init_binary', $data ?? [], null);
        $this->setIfExists('containerd_commit', $data ?? [], null);
        $this->setIfExists('runc_commit', $data ?? [], null);
        $this->setIfExists('init_commit', $data ?? [], null);
        $this->setIfExists('security_options', $data ?? [], null);
        $this->setIfExists('product_license', $data ?? [], null);
        $this->setIfExists('default_address_pools', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array.
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCgroupDriverAllowableValues();
        if (!is_null($this->container['cgroup_driver']) && !in_array($this->container['cgroup_driver'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cgroup_driver', must be one of '%s'",
                $this->container['cgroup_driver'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCgroupVersionAllowableValues();
        if (!is_null($this->container['cgroup_version']) && !in_array($this->container['cgroup_version'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cgroup_version', must be one of '%s'",
                $this->container['cgroup_version'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsolationAllowableValues();
        if (!is_null($this->container['isolation']) && !in_array($this->container['isolation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isolation', must be one of '%s'",
                $this->container['isolation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id.
     *
     * @return null|string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param null|string $id Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets containers.
     *
     * @return null|int
     */
    public function getContainers()
    {
        return $this->container['containers'];
    }

    /**
     * Sets containers.
     *
     * @param null|int $containers total number of containers on the host
     *
     * @return self
     */
    public function setContainers($containers)
    {
        if (is_null($containers)) {
            throw new \InvalidArgumentException('non-nullable containers cannot be null');
        }
        $this->container['containers'] = $containers;

        return $this;
    }

    /**
     * Gets containers_running.
     *
     * @return null|int
     */
    public function getContainersRunning()
    {
        return $this->container['containers_running'];
    }

    /**
     * Sets containers_running.
     *
     * @param null|int $containers_running number of containers with status `\"running\"`
     *
     * @return self
     */
    public function setContainersRunning($containers_running)
    {
        if (is_null($containers_running)) {
            throw new \InvalidArgumentException('non-nullable containers_running cannot be null');
        }
        $this->container['containers_running'] = $containers_running;

        return $this;
    }

    /**
     * Gets containers_paused.
     *
     * @return null|int
     */
    public function getContainersPaused()
    {
        return $this->container['containers_paused'];
    }

    /**
     * Sets containers_paused.
     *
     * @param null|int $containers_paused number of containers with status `\"paused\"`
     *
     * @return self
     */
    public function setContainersPaused($containers_paused)
    {
        if (is_null($containers_paused)) {
            throw new \InvalidArgumentException('non-nullable containers_paused cannot be null');
        }
        $this->container['containers_paused'] = $containers_paused;

        return $this;
    }

    /**
     * Gets containers_stopped.
     *
     * @return null|int
     */
    public function getContainersStopped()
    {
        return $this->container['containers_stopped'];
    }

    /**
     * Sets containers_stopped.
     *
     * @param null|int $containers_stopped number of containers with status `\"stopped\"`
     *
     * @return self
     */
    public function setContainersStopped($containers_stopped)
    {
        if (is_null($containers_stopped)) {
            throw new \InvalidArgumentException('non-nullable containers_stopped cannot be null');
        }
        $this->container['containers_stopped'] = $containers_stopped;

        return $this;
    }

    /**
     * Gets images.
     *
     * @return null|int
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images.
     *
     * @param null|int $images Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted.
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets driver.
     *
     * @return null|string
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver.
     *
     * @param null|string $driver name of the storage driver in use
     *
     * @return self
     */
    public function setDriver($driver)
    {
        if (is_null($driver)) {
            throw new \InvalidArgumentException('non-nullable driver cannot be null');
        }
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets driver_status.
     *
     * @return null|string[][]
     */
    public function getDriverStatus()
    {
        return $this->container['driver_status'];
    }

    /**
     * Sets driver_status.
     *
     * @param null|string[][] $driver_status Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice.
     *
     * @return self
     */
    public function setDriverStatus($driver_status)
    {
        if (is_null($driver_status)) {
            throw new \InvalidArgumentException('non-nullable driver_status cannot be null');
        }
        $this->container['driver_status'] = $driver_status;

        return $this;
    }

    /**
     * Gets docker_root_dir.
     *
     * @return null|string
     */
    public function getDockerRootDir()
    {
        return $this->container['docker_root_dir'];
    }

    /**
     * Sets docker_root_dir.
     *
     * @param null|string $docker_root_dir Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows.
     *
     * @return self
     */
    public function setDockerRootDir($docker_root_dir)
    {
        if (is_null($docker_root_dir)) {
            throw new \InvalidArgumentException('non-nullable docker_root_dir cannot be null');
        }
        $this->container['docker_root_dir'] = $docker_root_dir;

        return $this;
    }

    /**
     * Gets plugins.
     *
     * @return null|PluginsInfo
     */
    public function getPlugins()
    {
        return $this->container['plugins'];
    }

    /**
     * Sets plugins.
     *
     * @param null|PluginsInfo $plugins plugins
     *
     * @return self
     */
    public function setPlugins($plugins)
    {
        if (is_null($plugins)) {
            throw new \InvalidArgumentException('non-nullable plugins cannot be null');
        }
        $this->container['plugins'] = $plugins;

        return $this;
    }

    /**
     * Gets memory_limit.
     *
     * @return null|bool
     */
    public function getMemoryLimit()
    {
        return $this->container['memory_limit'];
    }

    /**
     * Sets memory_limit.
     *
     * @param null|bool $memory_limit indicates if the host has memory limit support enabled
     *
     * @return self
     */
    public function setMemoryLimit($memory_limit)
    {
        if (is_null($memory_limit)) {
            throw new \InvalidArgumentException('non-nullable memory_limit cannot be null');
        }
        $this->container['memory_limit'] = $memory_limit;

        return $this;
    }

    /**
     * Gets swap_limit.
     *
     * @return null|bool
     */
    public function getSwapLimit()
    {
        return $this->container['swap_limit'];
    }

    /**
     * Sets swap_limit.
     *
     * @param null|bool $swap_limit indicates if the host has memory swap limit support enabled
     *
     * @return self
     */
    public function setSwapLimit($swap_limit)
    {
        if (is_null($swap_limit)) {
            throw new \InvalidArgumentException('non-nullable swap_limit cannot be null');
        }
        $this->container['swap_limit'] = $swap_limit;

        return $this;
    }

    /**
     * Gets kernel_memory_tcp.
     *
     * @return null|bool
     */
    public function getKernelMemoryTcp()
    {
        return $this->container['kernel_memory_tcp'];
    }

    /**
     * Sets kernel_memory_tcp.
     *
     * @param null|bool $kernel_memory_tcp Indicates if the host has kernel memory TCP limit support enabled. This field is omitted if not supported.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.
     *
     * @return self
     */
    public function setKernelMemoryTcp($kernel_memory_tcp)
    {
        if (is_null($kernel_memory_tcp)) {
            throw new \InvalidArgumentException('non-nullable kernel_memory_tcp cannot be null');
        }
        $this->container['kernel_memory_tcp'] = $kernel_memory_tcp;

        return $this;
    }

    /**
     * Gets cpu_cfs_period.
     *
     * @return null|bool
     */
    public function getCpuCfsPeriod()
    {
        return $this->container['cpu_cfs_period'];
    }

    /**
     * Sets cpu_cfs_period.
     *
     * @param null|bool $cpu_cfs_period indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host
     *
     * @return self
     */
    public function setCpuCfsPeriod($cpu_cfs_period)
    {
        if (is_null($cpu_cfs_period)) {
            throw new \InvalidArgumentException('non-nullable cpu_cfs_period cannot be null');
        }
        $this->container['cpu_cfs_period'] = $cpu_cfs_period;

        return $this;
    }

    /**
     * Gets cpu_cfs_quota.
     *
     * @return null|bool
     */
    public function getCpuCfsQuota()
    {
        return $this->container['cpu_cfs_quota'];
    }

    /**
     * Sets cpu_cfs_quota.
     *
     * @param null|bool $cpu_cfs_quota indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host
     *
     * @return self
     */
    public function setCpuCfsQuota($cpu_cfs_quota)
    {
        if (is_null($cpu_cfs_quota)) {
            throw new \InvalidArgumentException('non-nullable cpu_cfs_quota cannot be null');
        }
        $this->container['cpu_cfs_quota'] = $cpu_cfs_quota;

        return $this;
    }

    /**
     * Gets cpu_shares.
     *
     * @return null|bool
     */
    public function getCpuShares()
    {
        return $this->container['cpu_shares'];
    }

    /**
     * Sets cpu_shares.
     *
     * @param null|bool $cpu_shares indicates if CPU Shares limiting is supported by the host
     *
     * @return self
     */
    public function setCpuShares($cpu_shares)
    {
        if (is_null($cpu_shares)) {
            throw new \InvalidArgumentException('non-nullable cpu_shares cannot be null');
        }
        $this->container['cpu_shares'] = $cpu_shares;

        return $this;
    }

    /**
     * Gets cpu_set.
     *
     * @return null|bool
     */
    public function getCpuSet()
    {
        return $this->container['cpu_set'];
    }

    /**
     * Sets cpu_set.
     *
     * @param null|bool $cpu_set Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)
     *
     * @return self
     */
    public function setCpuSet($cpu_set)
    {
        if (is_null($cpu_set)) {
            throw new \InvalidArgumentException('non-nullable cpu_set cannot be null');
        }
        $this->container['cpu_set'] = $cpu_set;

        return $this;
    }

    /**
     * Gets pids_limit.
     *
     * @return null|bool
     */
    public function getPidsLimit()
    {
        return $this->container['pids_limit'];
    }

    /**
     * Sets pids_limit.
     *
     * @param null|bool $pids_limit indicates if the host kernel has PID limit support enabled
     *
     * @return self
     */
    public function setPidsLimit($pids_limit)
    {
        if (is_null($pids_limit)) {
            throw new \InvalidArgumentException('non-nullable pids_limit cannot be null');
        }
        $this->container['pids_limit'] = $pids_limit;

        return $this;
    }

    /**
     * Gets oom_kill_disable.
     *
     * @return null|bool
     */
    public function getOomKillDisable()
    {
        return $this->container['oom_kill_disable'];
    }

    /**
     * Sets oom_kill_disable.
     *
     * @param null|bool $oom_kill_disable indicates if OOM killer disable is supported on the host
     *
     * @return self
     */
    public function setOomKillDisable($oom_kill_disable)
    {
        if (is_null($oom_kill_disable)) {
            throw new \InvalidArgumentException('non-nullable oom_kill_disable cannot be null');
        }
        $this->container['oom_kill_disable'] = $oom_kill_disable;

        return $this;
    }

    /**
     * Gets ipv4_forwarding.
     *
     * @return null|bool
     */
    public function getIpv4Forwarding()
    {
        return $this->container['ipv4_forwarding'];
    }

    /**
     * Sets ipv4_forwarding.
     *
     * @param null|bool $ipv4_forwarding indicates IPv4 forwarding is enabled
     *
     * @return self
     */
    public function setIpv4Forwarding($ipv4_forwarding)
    {
        if (is_null($ipv4_forwarding)) {
            throw new \InvalidArgumentException('non-nullable ipv4_forwarding cannot be null');
        }
        $this->container['ipv4_forwarding'] = $ipv4_forwarding;

        return $this;
    }

    /**
     * Gets bridge_nf_iptables.
     *
     * @return null|bool
     */
    public function getBridgeNfIptables()
    {
        return $this->container['bridge_nf_iptables'];
    }

    /**
     * Sets bridge_nf_iptables.
     *
     * @param null|bool $bridge_nf_iptables indicates if `bridge-nf-call-iptables` is available on the host
     *
     * @return self
     */
    public function setBridgeNfIptables($bridge_nf_iptables)
    {
        if (is_null($bridge_nf_iptables)) {
            throw new \InvalidArgumentException('non-nullable bridge_nf_iptables cannot be null');
        }
        $this->container['bridge_nf_iptables'] = $bridge_nf_iptables;

        return $this;
    }

    /**
     * Gets bridge_nf_ip6tables.
     *
     * @return null|bool
     */
    public function getBridgeNfIp6tables()
    {
        return $this->container['bridge_nf_ip6tables'];
    }

    /**
     * Sets bridge_nf_ip6tables.
     *
     * @param null|bool $bridge_nf_ip6tables indicates if `bridge-nf-call-ip6tables` is available on the host
     *
     * @return self
     */
    public function setBridgeNfIp6tables($bridge_nf_ip6tables)
    {
        if (is_null($bridge_nf_ip6tables)) {
            throw new \InvalidArgumentException('non-nullable bridge_nf_ip6tables cannot be null');
        }
        $this->container['bridge_nf_ip6tables'] = $bridge_nf_ip6tables;

        return $this;
    }

    /**
     * Gets debug.
     *
     * @return null|bool
     */
    public function getDebug()
    {
        return $this->container['debug'];
    }

    /**
     * Sets debug.
     *
     * @param null|bool $debug indicates if the daemon is running in debug-mode / with debug-level logging enabled
     *
     * @return self
     */
    public function setDebug($debug)
    {
        if (is_null($debug)) {
            throw new \InvalidArgumentException('non-nullable debug cannot be null');
        }
        $this->container['debug'] = $debug;

        return $this;
    }

    /**
     * Gets nfd.
     *
     * @return null|int
     */
    public function getNfd()
    {
        return $this->container['nfd'];
    }

    /**
     * Sets nfd.
     *
     * @param null|int $nfd The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled.
     *
     * @return self
     */
    public function setNfd($nfd)
    {
        if (is_null($nfd)) {
            throw new \InvalidArgumentException('non-nullable nfd cannot be null');
        }
        $this->container['nfd'] = $nfd;

        return $this;
    }

    /**
     * Gets n_goroutines.
     *
     * @return null|int
     */
    public function getNGoroutines()
    {
        return $this->container['n_goroutines'];
    }

    /**
     * Sets n_goroutines.
     *
     * @param null|int $n_goroutines The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.
     *
     * @return self
     */
    public function setNGoroutines($n_goroutines)
    {
        if (is_null($n_goroutines)) {
            throw new \InvalidArgumentException('non-nullable n_goroutines cannot be null');
        }
        $this->container['n_goroutines'] = $n_goroutines;

        return $this;
    }

    /**
     * Gets system_time.
     *
     * @return null|string
     */
    public function getSystemTime()
    {
        return $this->container['system_time'];
    }

    /**
     * Sets system_time.
     *
     * @param null|string $system_time Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     *
     * @return self
     */
    public function setSystemTime($system_time)
    {
        if (is_null($system_time)) {
            throw new \InvalidArgumentException('non-nullable system_time cannot be null');
        }
        $this->container['system_time'] = $system_time;

        return $this;
    }

    /**
     * Gets logging_driver.
     *
     * @return null|string
     */
    public function getLoggingDriver()
    {
        return $this->container['logging_driver'];
    }

    /**
     * Sets logging_driver.
     *
     * @param null|string $logging_driver the logging driver to use as a default for new containers
     *
     * @return self
     */
    public function setLoggingDriver($logging_driver)
    {
        if (is_null($logging_driver)) {
            throw new \InvalidArgumentException('non-nullable logging_driver cannot be null');
        }
        $this->container['logging_driver'] = $logging_driver;

        return $this;
    }

    /**
     * Gets cgroup_driver.
     *
     * @return null|string
     */
    public function getCgroupDriver()
    {
        return $this->container['cgroup_driver'];
    }

    /**
     * Sets cgroup_driver.
     *
     * @param null|string $cgroup_driver the driver to use for managing cgroups
     *
     * @return self
     */
    public function setCgroupDriver($cgroup_driver)
    {
        if (is_null($cgroup_driver)) {
            throw new \InvalidArgumentException('non-nullable cgroup_driver cannot be null');
        }
        $allowedValues = $this->getCgroupDriverAllowableValues();
        if (!in_array($cgroup_driver, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cgroup_driver', must be one of '%s'",
                    $cgroup_driver,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cgroup_driver'] = $cgroup_driver;

        return $this;
    }

    /**
     * Gets cgroup_version.
     *
     * @return null|string
     */
    public function getCgroupVersion()
    {
        return $this->container['cgroup_version'];
    }

    /**
     * Sets cgroup_version.
     *
     * @param null|string $cgroup_version the version of the cgroup
     *
     * @return self
     */
    public function setCgroupVersion($cgroup_version)
    {
        if (is_null($cgroup_version)) {
            throw new \InvalidArgumentException('non-nullable cgroup_version cannot be null');
        }
        $allowedValues = $this->getCgroupVersionAllowableValues();
        if (!in_array($cgroup_version, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cgroup_version', must be one of '%s'",
                    $cgroup_version,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cgroup_version'] = $cgroup_version;

        return $this;
    }

    /**
     * Gets n_events_listener.
     *
     * @return null|int
     */
    public function getNEventsListener()
    {
        return $this->container['n_events_listener'];
    }

    /**
     * Sets n_events_listener.
     *
     * @param null|int $n_events_listener number of event listeners subscribed
     *
     * @return self
     */
    public function setNEventsListener($n_events_listener)
    {
        if (is_null($n_events_listener)) {
            throw new \InvalidArgumentException('non-nullable n_events_listener cannot be null');
        }
        $this->container['n_events_listener'] = $n_events_listener;

        return $this;
    }

    /**
     * Gets kernel_version.
     *
     * @return null|string
     */
    public function getKernelVersion()
    {
        return $this->container['kernel_version'];
    }

    /**
     * Sets kernel_version.
     *
     * @param null|string $kernel_version Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.
     *
     * @return self
     */
    public function setKernelVersion($kernel_version)
    {
        if (is_null($kernel_version)) {
            throw new \InvalidArgumentException('non-nullable kernel_version cannot be null');
        }
        $this->container['kernel_version'] = $kernel_version;

        return $this;
    }

    /**
     * Gets operating_system.
     *
     * @return null|string
     */
    public function getOperatingSystem()
    {
        return $this->container['operating_system'];
    }

    /**
     * Sets operating_system.
     *
     * @param null|string $operating_system Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\"
     *
     * @return self
     */
    public function setOperatingSystem($operating_system)
    {
        if (is_null($operating_system)) {
            throw new \InvalidArgumentException('non-nullable operating_system cannot be null');
        }
        $this->container['operating_system'] = $operating_system;

        return $this;
    }

    /**
     * Gets os_version.
     *
     * @return null|string
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version.
     *
     * @param null|string $os_version version of the host's operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice
     *
     * @return self
     */
    public function setOsVersion($os_version)
    {
        if (is_null($os_version)) {
            throw new \InvalidArgumentException('non-nullable os_version cannot be null');
        }
        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets os_type.
     *
     * @return null|string
     */
    public function getOsType()
    {
        return $this->container['os_type'];
    }

    /**
     * Sets os_type.
     *
     * @param null|string $os_type Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment).
     *
     * @return self
     */
    public function setOsType($os_type)
    {
        if (is_null($os_type)) {
            throw new \InvalidArgumentException('non-nullable os_type cannot be null');
        }
        $this->container['os_type'] = $os_type;

        return $this;
    }

    /**
     * Gets architecture.
     *
     * @return null|string
     */
    public function getArchitecture()
    {
        return $this->container['architecture'];
    }

    /**
     * Sets architecture.
     *
     * @param null|string $architecture Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment).
     *
     * @return self
     */
    public function setArchitecture($architecture)
    {
        if (is_null($architecture)) {
            throw new \InvalidArgumentException('non-nullable architecture cannot be null');
        }
        $this->container['architecture'] = $architecture;

        return $this;
    }

    /**
     * Gets ncpu.
     *
     * @return null|int
     */
    public function getNcpu()
    {
        return $this->container['ncpu'];
    }

    /**
     * Sets ncpu.
     *
     * @param null|int $ncpu The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected.
     *
     * @return self
     */
    public function setNcpu($ncpu)
    {
        if (is_null($ncpu)) {
            throw new \InvalidArgumentException('non-nullable ncpu cannot be null');
        }
        $this->container['ncpu'] = $ncpu;

        return $this;
    }

    /**
     * Gets mem_total.
     *
     * @return null|int
     */
    public function getMemTotal()
    {
        return $this->container['mem_total'];
    }

    /**
     * Sets mem_total.
     *
     * @param null|int $mem_total total amount of physical memory available on the host, in bytes
     *
     * @return self
     */
    public function setMemTotal($mem_total)
    {
        if (is_null($mem_total)) {
            throw new \InvalidArgumentException('non-nullable mem_total cannot be null');
        }
        $this->container['mem_total'] = $mem_total;

        return $this;
    }

    /**
     * Gets index_server_address.
     *
     * @return null|string
     */
    public function getIndexServerAddress()
    {
        return $this->container['index_server_address'];
    }

    /**
     * Sets index_server_address.
     *
     * @param null|string $index_server_address address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud
     *
     * @return self
     */
    public function setIndexServerAddress($index_server_address)
    {
        if (is_null($index_server_address)) {
            throw new \InvalidArgumentException('non-nullable index_server_address cannot be null');
        }
        $this->container['index_server_address'] = $index_server_address;

        return $this;
    }

    /**
     * Gets registry_config.
     *
     * @return null|RegistryServiceConfig
     */
    public function getRegistryConfig()
    {
        return $this->container['registry_config'];
    }

    /**
     * Sets registry_config.
     *
     * @param null|RegistryServiceConfig $registry_config registry_config
     *
     * @return self
     */
    public function setRegistryConfig($registry_config)
    {
        if (is_null($registry_config)) {
            array_push($this->openAPINullablesSetToNull, 'registry_config');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index              = array_search('registry_config', $nullablesSetToNull);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['registry_config'] = $registry_config;

        return $this;
    }

    /**
     * Gets generic_resources.
     *
     * @return null|\MatthewBaggett\Docker\Api\Model\GenericResourcesInner[]
     */
    public function getGenericResources()
    {
        return $this->container['generic_resources'];
    }

    /**
     * Sets generic_resources.
     *
     * @param null|\MatthewBaggett\Docker\Api\Model\GenericResourcesInner[] $generic_resources User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`).
     *
     * @return self
     */
    public function setGenericResources($generic_resources)
    {
        if (is_null($generic_resources)) {
            throw new \InvalidArgumentException('non-nullable generic_resources cannot be null');
        }
        $this->container['generic_resources'] = $generic_resources;

        return $this;
    }

    /**
     * Gets http_proxy.
     *
     * @return null|string
     */
    public function getHttpProxy()
    {
        return $this->container['http_proxy'];
    }

    /**
     * Sets http_proxy.
     *
     * @param null|string $http_proxy HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
     *
     * @return self
     */
    public function setHttpProxy($http_proxy)
    {
        if (is_null($http_proxy)) {
            throw new \InvalidArgumentException('non-nullable http_proxy cannot be null');
        }
        $this->container['http_proxy'] = $http_proxy;

        return $this;
    }

    /**
     * Gets https_proxy.
     *
     * @return null|string
     */
    public function getHttpsProxy()
    {
        return $this->container['https_proxy'];
    }

    /**
     * Sets https_proxy.
     *
     * @param null|string $https_proxy HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration.
     *
     * @return self
     */
    public function setHttpsProxy($https_proxy)
    {
        if (is_null($https_proxy)) {
            throw new \InvalidArgumentException('non-nullable https_proxy cannot be null');
        }
        $this->container['https_proxy'] = $https_proxy;

        return $this;
    }

    /**
     * Gets no_proxy.
     *
     * @return null|string
     */
    public function getNoProxy()
    {
        return $this->container['no_proxy'];
    }

    /**
     * Sets no_proxy.
     *
     * @param null|string $no_proxy Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.
     *
     * @return self
     */
    public function setNoProxy($no_proxy)
    {
        if (is_null($no_proxy)) {
            throw new \InvalidArgumentException('non-nullable no_proxy cannot be null');
        }
        $this->container['no_proxy'] = $no_proxy;

        return $this;
    }

    /**
     * Gets name.
     *
     * @return null|string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name.
     *
     * @param null|string $name hostname of the host
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels.
     *
     * @return null|string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels.
     *
     * @param null|string[] $labels User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm.
     *
     * @return self
     */
    public function setLabels($labels)
    {
        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets experimental_build.
     *
     * @return null|bool
     */
    public function getExperimentalBuild()
    {
        return $this->container['experimental_build'];
    }

    /**
     * Sets experimental_build.
     *
     * @param null|bool $experimental_build indicates if experimental features are enabled on the daemon
     *
     * @return self
     */
    public function setExperimentalBuild($experimental_build)
    {
        if (is_null($experimental_build)) {
            throw new \InvalidArgumentException('non-nullable experimental_build cannot be null');
        }
        $this->container['experimental_build'] = $experimental_build;

        return $this;
    }

    /**
     * Gets server_version.
     *
     * @return null|string
     */
    public function getServerVersion()
    {
        return $this->container['server_version'];
    }

    /**
     * Sets server_version.
     *
     * @param null|string $server_version version string of the daemon
     *
     * @return self
     */
    public function setServerVersion($server_version)
    {
        if (is_null($server_version)) {
            throw new \InvalidArgumentException('non-nullable server_version cannot be null');
        }
        $this->container['server_version'] = $server_version;

        return $this;
    }

    /**
     * Gets runtimes.
     *
     * @return null|array<string,\MatthewBaggett\Docker\Api\Model\Runtime>
     */
    public function getRuntimes()
    {
        return $this->container['runtimes'];
    }

    /**
     * Sets runtimes.
     *
     * @param null|array<string,\MatthewBaggett\Docker\Api\Model\Runtime> $runtimes List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here.
     *
     * @return self
     */
    public function setRuntimes($runtimes)
    {
        if (is_null($runtimes)) {
            throw new \InvalidArgumentException('non-nullable runtimes cannot be null');
        }
        $this->container['runtimes'] = $runtimes;

        return $this;
    }

    /**
     * Gets default_runtime.
     *
     * @return null|string
     */
    public function getDefaultRuntime()
    {
        return $this->container['default_runtime'];
    }

    /**
     * Sets default_runtime.
     *
     * @param null|string $default_runtime Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time.
     *
     * @return self
     */
    public function setDefaultRuntime($default_runtime)
    {
        if (is_null($default_runtime)) {
            throw new \InvalidArgumentException('non-nullable default_runtime cannot be null');
        }
        $this->container['default_runtime'] = $default_runtime;

        return $this;
    }

    /**
     * Gets swarm.
     *
     * @return null|SwarmInfo
     */
    public function getSwarm()
    {
        return $this->container['swarm'];
    }

    /**
     * Sets swarm.
     *
     * @param null|SwarmInfo $swarm swarm
     *
     * @return self
     */
    public function setSwarm($swarm)
    {
        if (is_null($swarm)) {
            throw new \InvalidArgumentException('non-nullable swarm cannot be null');
        }
        $this->container['swarm'] = $swarm;

        return $this;
    }

    /**
     * Gets live_restore_enabled.
     *
     * @return null|bool
     */
    public function getLiveRestoreEnabled()
    {
        return $this->container['live_restore_enabled'];
    }

    /**
     * Sets live_restore_enabled.
     *
     * @param null|bool $live_restore_enabled Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected.
     *
     * @return self
     */
    public function setLiveRestoreEnabled($live_restore_enabled)
    {
        if (is_null($live_restore_enabled)) {
            throw new \InvalidArgumentException('non-nullable live_restore_enabled cannot be null');
        }
        $this->container['live_restore_enabled'] = $live_restore_enabled;

        return $this;
    }

    /**
     * Gets isolation.
     *
     * @return null|string
     */
    public function getIsolation()
    {
        return $this->container['isolation'];
    }

    /**
     * Sets isolation.
     *
     * @param null|string $isolation Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms.
     *
     * @return self
     */
    public function setIsolation($isolation)
    {
        if (is_null($isolation)) {
            throw new \InvalidArgumentException('non-nullable isolation cannot be null');
        }
        $allowedValues = $this->getIsolationAllowableValues();
        if (!in_array($isolation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isolation', must be one of '%s'",
                    $isolation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isolation'] = $isolation;

        return $this;
    }

    /**
     * Gets init_binary.
     *
     * @return null|string
     */
    public function getInitBinary()
    {
        return $this->container['init_binary'];
    }

    /**
     * Sets init_binary.
     *
     * @param null|string $init_binary Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.
     *
     * @return self
     */
    public function setInitBinary($init_binary)
    {
        if (is_null($init_binary)) {
            throw new \InvalidArgumentException('non-nullable init_binary cannot be null');
        }
        $this->container['init_binary'] = $init_binary;

        return $this;
    }

    /**
     * Gets containerd_commit.
     *
     * @return null|Commit
     */
    public function getContainerdCommit()
    {
        return $this->container['containerd_commit'];
    }

    /**
     * Sets containerd_commit.
     *
     * @param null|Commit $containerd_commit containerd_commit
     *
     * @return self
     */
    public function setContainerdCommit($containerd_commit)
    {
        if (is_null($containerd_commit)) {
            throw new \InvalidArgumentException('non-nullable containerd_commit cannot be null');
        }
        $this->container['containerd_commit'] = $containerd_commit;

        return $this;
    }

    /**
     * Gets runc_commit.
     *
     * @return null|Commit
     */
    public function getRuncCommit()
    {
        return $this->container['runc_commit'];
    }

    /**
     * Sets runc_commit.
     *
     * @param null|Commit $runc_commit runc_commit
     *
     * @return self
     */
    public function setRuncCommit($runc_commit)
    {
        if (is_null($runc_commit)) {
            throw new \InvalidArgumentException('non-nullable runc_commit cannot be null');
        }
        $this->container['runc_commit'] = $runc_commit;

        return $this;
    }

    /**
     * Gets init_commit.
     *
     * @return null|Commit
     */
    public function getInitCommit()
    {
        return $this->container['init_commit'];
    }

    /**
     * Sets init_commit.
     *
     * @param null|Commit $init_commit init_commit
     *
     * @return self
     */
    public function setInitCommit($init_commit)
    {
        if (is_null($init_commit)) {
            throw new \InvalidArgumentException('non-nullable init_commit cannot be null');
        }
        $this->container['init_commit'] = $init_commit;

        return $this;
    }

    /**
     * Gets security_options.
     *
     * @return null|string[]
     */
    public function getSecurityOptions()
    {
        return $this->container['security_options'];
    }

    /**
     * Sets security_options.
     *
     * @param null|string[] $security_options List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), rootless and no-new-privileges.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs.
     *
     * @return self
     */
    public function setSecurityOptions($security_options)
    {
        if (is_null($security_options)) {
            throw new \InvalidArgumentException('non-nullable security_options cannot be null');
        }
        $this->container['security_options'] = $security_options;

        return $this;
    }

    /**
     * Gets product_license.
     *
     * @return null|string
     */
    public function getProductLicense()
    {
        return $this->container['product_license'];
    }

    /**
     * Sets product_license.
     *
     * @param null|string $product_license Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included.
     *
     * @return self
     */
    public function setProductLicense($product_license)
    {
        if (is_null($product_license)) {
            throw new \InvalidArgumentException('non-nullable product_license cannot be null');
        }
        $this->container['product_license'] = $product_license;

        return $this;
    }

    /**
     * Gets default_address_pools.
     *
     * @return null|\MatthewBaggett\Docker\Api\Model\SystemInfoDefaultAddressPoolsInner[]
     */
    public function getDefaultAddressPools()
    {
        return $this->container['default_address_pools'];
    }

    /**
     * Sets default_address_pools.
     *
     * @param null|\MatthewBaggett\Docker\Api\Model\SystemInfoDefaultAddressPoolsInner[] $default_address_pools List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools.
     *
     * @return self
     */
    public function setDefaultAddressPools($default_address_pools)
    {
        if (is_null($default_address_pools)) {
            throw new \InvalidArgumentException('non-nullable default_address_pools cannot be null');
        }
        $this->container['default_address_pools'] = $default_address_pools;

        return $this;
    }

    /**
     * Gets warnings.
     *
     * @return null|string[]
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings.
     *
     * @param null|string[] $warnings List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user.
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
